{"ast":null,"code":"const API_URL = 'http://localhost:3001/employee';\nexport const loginEmployee = async (email, password) => {\n  const response = await fetch(`${API_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Ошибка входа');\n  }\n  return response.json();\n};\nexport const getEmployeeProfile = async () => {\n  const token = localStorage.getItem('employeeToken');\n  const response = await fetch(`${API_URL}/me`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Ошибка получения профиля');\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","loginEmployee","email","password","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","getEmployeeProfile","token","localStorage","getItem"],"sources":["E:/вкр/Project/frontend/src/Employee/services/AuthService.js"],"sourcesContent":["const API_URL = 'http://localhost:3001/employee';\r\n\r\nexport const loginEmployee = async (email, password) => {\r\n  const response = await fetch(`${API_URL}/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.message || 'Ошибка входа');\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getEmployeeProfile = async () => {\r\n  const token = localStorage.getItem('employeeToken');\r\n  const response = await fetch(`${API_URL}/me`, {\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.message || 'Ошибка получения профиля');\r\n  }\r\n\r\n  return response.json();\r\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAG,gCAAgC;AAEhD,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EACtD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,QAAQ,EAAE;IAC/CM,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,cAAc,CAAC;EACtD;EAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB,CAAC;AAED,OAAO,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EACnD,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,KAAK,EAAE;IAC5CO,OAAO,EAAE;MACP,eAAe,EAAE,UAAUU,KAAK;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,0BAA0B,CAAC;EAClE;EAEA,OAAOX,QAAQ,CAACS,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}