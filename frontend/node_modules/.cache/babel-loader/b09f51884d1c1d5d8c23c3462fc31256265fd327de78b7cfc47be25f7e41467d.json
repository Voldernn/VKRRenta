{"ast":null,"code":"// ContractService.js\nexport const fetchUserContracts = async (token, userId) => {\n  const response = await fetch(`http://localhost:3001/contract/user/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) throw new Error('Ошибка загрузки контрактов');\n  return await response.json();\n};\nexport const createContract = async (contractData, token) => {\n  const response = await fetch('http://localhost:3001/contract', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(contractData)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Ошибка создания контракта');\n  }\n  return await response.json();\n};\nexport const updateContract = async (contractId, contractData, token) => {\n  const response = await fetch(`http://localhost:3001/contract/${contractId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(contractData)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Ошибка обновления контракта');\n  }\n  return await response.json();\n};\nexport const fetchContractDetails = async (contractId, token) => {\n  const response = await fetch(`http://localhost:3001/contract/${contractId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) throw new Error('Ошибка загрузки данных контракта');\n  return await response.json();\n};","map":{"version":3,"names":["fetchUserContracts","token","userId","response","fetch","headers","ok","Error","json","createContract","contractData","method","body","JSON","stringify","errorData","message","updateContract","contractId","fetchContractDetails"],"sources":["E:/вкр/Project/frontend/src/Auth/Profile/Contract/ContractService.js"],"sourcesContent":["// ContractService.js\r\nexport const fetchUserContracts = async (token, userId) => {\r\n    const response = await fetch(`http://localhost:3001/contract/user/${userId}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) throw new Error('Ошибка загрузки контрактов');\r\n    return await response.json();\r\n  };\r\n  \r\n  export const createContract = async (contractData, token) => {\r\n    const response = await fetch('http://localhost:3001/contract', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(contractData),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Ошибка создания контракта');\r\n    }\r\n  \r\n    return await response.json();\r\n  };\r\n  \r\n  export const updateContract = async (contractId, contractData, token) => {\r\n    const response = await fetch(`http://localhost:3001/contract/${contractId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify(contractData),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Ошибка обновления контракта');\r\n    }\r\n  \r\n    return await response.json();\r\n  };\r\n  \r\n  export const fetchContractDetails = async (contractId, token) => {\r\n    const response = await fetch(`http://localhost:3001/contract/${contractId}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) throw new Error('Ошибка загрузки данных контракта');\r\n    return await response.json();\r\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,kBAAkB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,MAAM,KAAK;EACvD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuCF,MAAM,EAAE,EAAE;IAC5EG,OAAO,EAAE;MACP,eAAe,EAAE,UAAUJ,KAAK;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAACE,QAAQ,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/D,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,YAAY,EAAET,KAAK,KAAK;EAC3D,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;IAC7DO,MAAM,EAAE,MAAM;IACdN,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUJ,KAAK;IAClC,CAAC;IACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,YAAY;EACnC,CAAC,CAAC;EAEF,IAAI,CAACP,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMS,SAAS,GAAG,MAAMZ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACvC,MAAM,IAAID,KAAK,CAACQ,SAAS,CAACC,OAAO,IAAI,2BAA2B,CAAC;EACnE;EAEA,OAAO,MAAMb,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMS,cAAc,GAAG,MAAAA,CAAOC,UAAU,EAAER,YAAY,EAAET,KAAK,KAAK;EACvE,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkCc,UAAU,EAAE,EAAE;IAC3EP,MAAM,EAAE,KAAK;IACbN,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUJ,KAAK;IAClC,CAAC;IACDW,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,YAAY;EACnC,CAAC,CAAC;EAEF,IAAI,CAACP,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMS,SAAS,GAAG,MAAMZ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACvC,MAAM,IAAID,KAAK,CAACQ,SAAS,CAACC,OAAO,IAAI,6BAA6B,CAAC;EACrE;EAEA,OAAO,MAAMb,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMW,oBAAoB,GAAG,MAAAA,CAAOD,UAAU,EAAEjB,KAAK,KAAK;EAC/D,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkCc,UAAU,EAAE,EAAE;IAC3Eb,OAAO,EAAE;MACP,eAAe,EAAE,UAAUJ,KAAK;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAACE,QAAQ,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;EACrE,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}