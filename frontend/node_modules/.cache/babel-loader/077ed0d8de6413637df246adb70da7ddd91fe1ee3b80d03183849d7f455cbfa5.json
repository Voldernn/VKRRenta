{"ast":null,"code":"const API_URL = 'http://localhost:3001/api/auth'; // Замените на ваш URL API\n\nexport const register = async userData => {\n  const response = await fetch(`${API_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Ошибка регистрации');\n  }\n  return await response.json();\n};\nexport const login = async (email, password) => {\n  const response = await fetch(`${API_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Ошибка входа');\n  }\n  return await response.json();\n};\nexport const getMe = async () => {\n  const token = localStorage.getItem('token');\n  const response = await fetch(`${API_URL}/me`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Ошибка получения данных пользователя');\n  }\n  return await response.json();\n};","map":{"version":3,"names":["API_URL","register","userData","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","login","email","password","getMe","token","localStorage","getItem"],"sources":["E:/вкр/Project/frontend/src/Auth/authService.js"],"sourcesContent":["const API_URL = 'http://localhost:3001/api/auth'; // Замените на ваш URL API\r\n\r\nexport const register = async (userData) => {\r\n  const response = await fetch(`${API_URL}/register`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.message || 'Ошибка регистрации');\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n\r\nexport const login = async (email, password) => {\r\n  const response = await fetch(`${API_URL}/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.message || 'Ошибка входа');\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n\r\nexport const getMe = async () => {\r\n  const token = localStorage.getItem('token');\r\n  const response = await fetch(`${API_URL}/me`, {\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`,\r\n    },\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error('Ошибка получения данных пользователя');\r\n  }\r\n\r\n  return await response.json();\r\n};"],"mappings":"AAAA,MAAMA,OAAO,GAAG,gCAAgC,CAAC,CAAC;;AAElD,OAAO,MAAMC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EAC1C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,WAAW,EAAE;IAClDK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;EAC/B,CAAC,CAAC;EAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,oBAAoB,CAAC;EAC5D;EAEA,OAAO,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMG,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,QAAQ,EAAE;IAC/CK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEO,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EAEF,IAAI,CAACd,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,cAAc,CAAC;EACtD;EAEA,OAAO,MAAMX,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMM,KAAK,GAAG,MAAAA,CAAA,KAAY;EAC/B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,KAAK,EAAE;IAC5CM,OAAO,EAAE;MACP,eAAe,EAAE,UAAUa,KAAK;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAAChB,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIG,KAAK,CAAC,sCAAsC,CAAC;EACzD;EAEA,OAAO,MAAMV,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}