{"ast":null,"code":"// DocumentService.js\nexport const fetchUserDocuments = async (token, userId) => {\n  const response = await fetch(`http://localhost:3001/document/user/${userId}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Ошибка загрузки документов');\n  }\n  return await response.json();\n};\nexport const updateDocumentLink = async (documentId, newLink, token) => {\n  const response = await fetch(`http://localhost:3001/document/link/${documentId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      link: newLink\n    })\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.message || 'Ошибка обновления ссылки');\n  }\n  return await response.json();\n};","map":{"version":3,"names":["fetchUserDocuments","token","userId","response","fetch","headers","ok","errorData","json","Error","message","updateDocumentLink","documentId","newLink","method","body","JSON","stringify","link"],"sources":["E:/вкр/VKRRenta/frontend/src/Auth/Profile/Document/DocumentService.js"],"sourcesContent":["// DocumentService.js\r\nexport const fetchUserDocuments = async (token, userId) => {\r\n    const response = await fetch(`http://localhost:3001/document/user/${userId}`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Ошибка загрузки документов');\r\n    }\r\n    return await response.json();\r\n  };\r\n  \r\n  export const updateDocumentLink = async (documentId, newLink, token) => {\r\n    const response = await fetch(`http://localhost:3001/document/link/${documentId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({ link: newLink }),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Ошибка обновления ссылки');\r\n    }\r\n  \r\n    return await response.json();\r\n  };"],"mappings":"AAAA;AACA,OAAO,MAAMA,kBAAkB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,MAAM,KAAK;EACvD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuCF,MAAM,EAAE,EAAE;IAC5EG,OAAO,EAAE;MACP,eAAe,EAAE,UAAUJ,KAAK;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAACE,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,4BAA4B,CAAC;EACpE;EACA,OAAO,MAAMP,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMG,kBAAkB,GAAG,MAAAA,CAAOC,UAAU,EAAEC,OAAO,EAAEZ,KAAK,KAAK;EACtE,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuCQ,UAAU,EAAE,EAAE;IAChFE,MAAM,EAAE,KAAK;IACbT,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUJ,KAAK;IAClC,CAAC;IACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,IAAI,EAAEL;IAAQ,CAAC;EACxC,CAAC,CAAC;EAEF,IAAI,CAACV,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,0BAA0B,CAAC;EAClE;EAEA,OAAO,MAAMP,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}